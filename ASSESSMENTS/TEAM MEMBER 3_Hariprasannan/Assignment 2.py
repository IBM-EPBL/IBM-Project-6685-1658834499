# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qnZUCs_u5nZDyq3-ENhadjMzcTXXhXuq
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns 
import math
df_data = pd.read_csv ("Churn_Modelling.csv")
df_data
#print(df_data.head())
#print(df_data.info())
df_data.duplicated().sum()
df_data[['CreditScore','Age','Tenure','Balance','HasCrCard','EstimatedSalary','Exited','IsActiveMember','NumOfProducts']].describe()


#sns.countplot(df_data.Sumame)

plot1=sns.histplot(df_data.Age,kde=True)

plot1=sns.histplot(df_data.Balance,kde=True)

plot1=sns.histplot(df_data.Tenure,kde=True)

plot1=sns.histplot(df_data.CreditScore,kde=True)

plot1=sns.histplot(df_data.Exited,kde=True)

plot1=sns.histplot(df_data.HasCrCard,kde=True)

plot1=sns.histplot(df_data.EstimatedSalary,kde=True)

plot1=sns.histplot(df_data.IsActiveMember,kde=True)

plot1=sns.histplot(df_data.NumOfProducts,kde=True)

sns.countplot(df_data.Gender)

sns.countplot(df_data.Geography)

df_data[['Balance','Age','CreditScore','EstimatedSalary','HasCrCard']].corr()

sns.scatterplot(df_data.Age,df_data.Balance)
plt.ylim(100,50000)

plt.figure(figsize=(15,15))
sns.kdeplot(data=df_data,x='Age',hue = 'Gender',fill = True)

sns.lmplot("Age","Balance",df_data, hue="Geography", fit_reg=False);

mean1 = df['Age'].mean()
sum1 = df['Age'].sum()
max1 = df['Age'].max()
min1 = df['Age'].min()
count1 = df['Age'].count()
median1 = df['Age'].median() 
std1 = df['Age'].std() 
var1 = df['Age'].var()
print(mean1)
print(sum1)
print(max1)
print(min1)
print(count1)
print(median1)
print(std1)
print(var1)

groupby_sum1 = df.groupby(['Geography']).sum()
groupby_count1 = df.groupby(['Geography']).count()

print(groupby_sum1)
print(groupby_count1)

import pandas as pd 
df_data = pd.read_csv ("Churn_Modelling.csv")
x =df_data.iloc[:, :-1].values
print(x)

Y = df_data.iloc[:, -1].values
print(Y)

df_data.head()

df_numeric = df_data[['Age', 'CreditScore','Tenure', 'Balance', 'HasCrCard','IsActiveMember']]
df_categorical = df_data[['Gender', 'Geography', 'Surname']]
df_numeric.head()
df_categorical.head()
print(df_data['Gender'].unique())
print(df_data['Geography'].unique())
print(df_data['Surname'].unique())

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
encoder.fit(df_categorical['Gender'])

values = encoder.transform(df_categorical['Gender'])

print("Before Encoding:", list(df_categorical['Gender'][-10:]))
print("After Encoding:", values[-10:])
print("The inverse from the encoding result:", encoder.inverse_transform(values[-10:]))

Encoder = LabelEncoder()
Values = Encoder.fit_transform(df_categorical['Surname'])

print("Before Encoding:", list(df_categorical['Surname'][:5]))
print("After Encoding:", Values[:5])
print("The inverse from the encoding result:", Encoder.inverse_transform(Values[:5]))

df_data['split'] = np.random.randn(df_data.shape[0], 1)

msk = np.random.rand(len(df_data)) <= 0.7

train = df_data[msk]
test = df_data[~msk]
print(train)
print(test)